{"version":3,"sources":["styles.js","App.js","serviceWorker.js","index.js"],"names":["styles","Title","gridArea","fontSize","fontFamily","ProfilePicture","Bio","App","display","minWidth","minHeight","gridTemplateColumns","gridTemplateRows","gridTemplateAreas","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleHoverChange","setState","assign","state","alt","def","picture","getPicture","react_default","a","createElement","style","Styles","onMouseEnter","onMouseLeave","src","Component","Sidebar","pages","i","length","App_ProfilePicture","href","App_Sidebar","selected","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAoDeA,SAAA,CACbC,MAlDY,CAEZC,SAAU,QAGVC,SAAU,OACVC,WAAY,0BA6CZC,eAzCqB,CAErBH,SAAU,mBAwCVI,IApCU,CAEVJ,SAAU,MAGVC,SAAU,OACVC,WAAY,0BA+BZG,IAlBU,CAEVC,QAAS,OACTC,SAAU,OACVC,UAAW,QACXC,oBAAqB,kBACrBC,iBAAkB,sBAClBC,kBAAiB,mKCxCbR,cACJ,SAAAA,EAAYS,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAb,IAChBU,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAX,GAAAgB,KAAAH,KAAMJ,KAORQ,kBAAoB,WAClBP,EAAKQ,SAASP,OAAOQ,OAAOT,EAAKU,MAAO,CAACC,KAAMX,EAAKU,MAAMC,QAN1DX,EAAKU,MAAQ,CACXC,KAAK,GAJSX,4EAahB,OAAOG,KAAKO,MAAMC,IAAMR,KAAKJ,MAAMY,IAAMR,KAAKJ,MAAMa,qCAIpD,IAAMC,EAAUV,KAAKW,aAErB,OACEC,EAAAC,EAAAC,cAAA,OACEC,MAAOC,EAAO7B,eACd8B,aAAcjB,KAAKI,kBACnBc,aAAclB,KAAKI,mBACnBQ,EAAAC,EAAAC,cAAA,OAAKK,IAAKT,YAzBWU,aA+BvBC,sLAGF,IADA,IAAMC,EAAQtB,KAAKJ,MAAM0B,MACjBC,EAAI,EAAGA,EAAID,EAAME,OAAQD,uCAMjC,OACEX,EAAAC,EAAAC,cAAA,OAAKC,MAAOC,EAAOK,iBAVHD,aAuDP/B,mLAxBX,OACEuB,EAAAC,EAAAC,cAAA,OAAKC,MAAOC,EAAO3B,KACjBuB,EAAAC,EAAAC,cAAA,OAAKC,MAAOC,EAAOjC,OACjB6B,EAAAC,EAAAC,cAAA,uCAIFF,EAAAC,EAAAC,cAACW,EAAD,CAAgBhB,IAjBD,wBAiBkBD,IAhBlB,0BAkBfI,EAAAC,EAAAC,cAAA,OAAKC,MAAOC,EAAO5B,KACjBwB,EAAAC,EAAAC,cAAA,+CAEEF,EAAAC,EAAAC,cAAA,KAAGY,KAlBM,qDAkBT,cAFF,oCAIEd,EAAAC,EAAAC,cAAA,KAAGY,KAnBI,wEAmBP,YAJF,MAOFd,EAAAC,EAAAC,cAACa,EAAD,CAASL,MAnBC,CAAC,WAAY,mBAAoB,iBAmBpBM,SAAU,YA/BvBR,aCzCES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.efbd5995.chunk.js","sourcesContent":["\n\n// Title holds our name\nconst Title = {\n  //Grid positioning\n  gridArea: \"title\",\n  \n  //Styling\n  fontSize: \"40px\",\n  fontFamily: \"'Futura', Times, serif\",\n}\n\n// ProfilePicture holds our profile Picture\nconst ProfilePicture = {\n  //Grid positioning\n  gridArea: \"profile_picture\",\n}\n\n// Bio holds our bio\nconst Bio = {\n  //Grid positioning\n  gridArea: \"bio\",\n  \n  //Styling\n  fontSize: \"25px\",\n  fontFamily: \"'Futura', Times, serif\",\n}\n\nconst Sidebar = {\n  //Grid positioning\n  gridArea: \"side\",\n  \n  //Styling\n  fontSize: \"30px\",\n  fontFamily: \"'Futura', Times, serif\",\n}\n\n// App wraps the rest of our reactJS page\nconst App = {\n  //Grid positioning\n  display: \"grid\",\n  minWidth: \"100%\",\n  minHeight: \"100vh\",\n  gridTemplateColumns: \"1fr 1fr 1fr 1fr\",\n  gridTemplateRows: \".25fr 1.5fr 1.125fr\",\n  gridTemplateAreas: `\n                      '. title title side'\n                      '. profile_picture . side'\n                      '. bio bio side'\n                     `                   \n}\n\nexport default {\n  Title: Title,\n  ProfilePicture: ProfilePicture,\n  Bio: Bio,\n  App: App\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport Styles from './styles.js';\n\n\nclass ProfilePicture extends Component{\n  constructor(props){\n    super(props);\n    \n    this.state = {\n      alt: false\n    }  \n  }\n  \n  handleHoverChange = () => {\n    this.setState(Object.assign(this.state, {alt: !this.state.alt}));\n  }\n  \n  getPicture(){\n    return this.state.alt ? this.props.alt : this.props.def;\n  }\n  \n  render() {\n    const picture = this.getPicture();\n      \n    return(\n      <div \n        style={Styles.ProfilePicture} \n        onMouseEnter={this.handleHoverChange} \n        onMouseLeave={this.handleHoverChange}>\n        <img src={picture}></img>\n      </div>\n    );\n  }\n}\n\nclass Sidebar extends Component {\n  buildList(){\n    const pages = this.props.pages;\n    for(let i = 0; i < pages.length; i++){\n      \n    }\n  }\n  \n  render(){\n    return(\n      <div style={Styles.Sidebar}>\n        \n      </div>\n    );\n  }\n}\n\nclass App extends Component {\n  render() {\n    \n    //TODO: move this somewhere better, using webpack? \n    const defPicture = \"https://goo.gl/pq4Wdh\";\n    const altPicture = \"https://goo.gl/22JBBD\";\n    \n    //Some links\n    const linkedIn = \"https://www.linkedin.com/in/nicholas-m-252227174/\";\n    const gitHub = \"https://github.com/nktmerch/nktmerch.github.io/blob/master/README.md\";\n    \n    //Yeah, same with this?\n    const pages = [\"about me\", \"cirriculum vitae\", \"things I like\"];\n    \n    return (\n      <div style={Styles.App}>\n        <div style={Styles.Title}>\n          <p>\n            (Nicholas) Kiran Merchant\n          </p>\n        </div>\n        <ProfilePicture def={defPicture} alt={altPicture}>\n        </ProfilePicture>\n        <div style={Styles.Bio}>\n          <p>\n            You can find more information on my \n            <a href={linkedIn}> LinkedIn </a>\n            page, or check out my projects on\n            <a href={gitHub}> GitHub </a>.\n          </p>\n        </div>\n        <Sidebar pages={pages} selected={0}>\n        </Sidebar>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}